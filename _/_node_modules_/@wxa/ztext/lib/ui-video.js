require("../../../../../common.js");

var webpackJsonp = wx.webpackJsonp;

webpackJsonp([ 3 ], {
    94: function(e, t, a) {
        a(95);
    },
    95: function(e, t, a) {
        "use strict";
        var n, i = (n = a(96)) && n.__esModule ? n : {
            default: n
        };
        Component({
            externalClasses: [ "block-class" ],
            data: {
                video: null,
                isLoading: !1,
                lastPlayTime: 0
            },
            properties: {
                lensId: String,
                poster: String,
                node: Object,
                useFullscreenVideo: Boolean
            },
            attached: function() {
                var e = this.data.node;
                e && this.setData(function(e) {
                    return {
                        lensId: e.attrs["data-lens-id"],
                        poster: e.attrs["data-poster"]
                    };
                }(e)), this.recordPlayTime = 0;
            },
            methods: {
                handleTap: function() {
                    this.fetchVideoInfo();
                },
                fetchVideoInfo: function() {
                    var e = this;
                    this.data.isLoading || (this.setData({
                        isLoading: !0
                    }), (0, i.default)(wx.request)({
                        url: "https://lens.zhihu.com/api/videos/".concat(this.data.lensId),
                        header: {
                            authorization: "oauth c3cef7c66a1843f8b3a9e6a1e3160e20"
                        }
                    }).then(function(t) {
                        e.setData({
                            isLoading: !1
                        }), t.data && e.setData({
                            video: t.data
                        });
                    }).then(function() {
                        e.data.useFullscreenVideo && (e.videoContext = wx.createVideoContext("myVideo", e), 
                        e.videoContext.requestFullScreen({
                            direction: 0
                        }));
                    }).catch(function() {
                        e.setData({
                            isLoading: !1
                        });
                    }));
                },
                handleTimeUpdate: function(e) {
                    var t = e.detail, a = t.currentTime;
                    t.duration;
                    this.recordPlayTime = a;
                },
                handleFullScreenChange: function(e) {
                    var t = e.detail.fullScreen;
                    this.data.useFullscreenVideo && !t && this.setData({
                        lastPlayTime: this.recordPlayTime,
                        video: null
                    });
                }
            }
        });
    },
    96: function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.default = void 0;
        var n = function(e) {
            return function(t) {
                return new Promise(function(a, n) {
                    e(Object.assign({}, t, {
                        success: function(e) {
                            a(e);
                        },
                        fail: function(e) {
                            n(e);
                        }
                    }));
                });
            };
        };
        t.default = n;
    }
}, [ 94 ]);